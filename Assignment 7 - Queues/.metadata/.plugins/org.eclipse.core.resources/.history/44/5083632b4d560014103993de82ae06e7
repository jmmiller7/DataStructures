import java.util.Random;

public class Simulation 
{
	static LinkedQueue<PrintTask> printQueue;
	static Printer hp;
	static int simulationPd;		// Simulation time in seconds
	static int minAT = 0;		// Starting time to allow tasks
	static int maxAT = 9000;		// When to stop allowing tasks
	static int numTasks = 0;		// Number of tasks printed
	static int waitTime = 0;		// Total waiting time for all tasks
	static int maxNumPages;			// Max number of pages allowed to be printed
	static Random rand = new Random();
	
	
	public static void main(String[] args)
	{
		// instantiate variables	
		hp = new Printer(25);
		printQueue = new LinkedQueue<PrintTask>();
		simulationPd = 10000;		// Simulation period of 10000 seconds, or 167 minutes
		
		
		// populate tasks
		for(int i = 0; i <= 100; i++)
		{
			int pagesToPrint = rand.nextInt(100) + 1;	// generates maxPages up to 100 pages
			PrintTask task = new PrintTask(pagesToPrint);
			maxNumPages = task.getMaxNumPages();
			printQueue.enqueue(task);
		}
		
		
		print();
		
		System.out.println("Duration: " + simulationPd + " second(s) ==> " + (simulationPd/60) + " minutes.");
		System.out.println("Printer Speed = 10ppm");
		System.out.println();
		System.out.println("Minimum arrival time:\t" + minAT + " seconds");
		System.out.println("Maximum arrival time:\t" + maxAT + " seconds");
		System.out.println("Maximum task size:\t" + maxNumPages + "  pages");
		System.out.println();
		System.out.println("Average wait time:\t\t" + (waitTime/numTasks) + " second(s).");
		System.out.println("Number of tasks processed:\t" + numTasks);
		System.out.println("Number of tasks still waiting:\t" + (100-numTasks));
	}
	
	
	// Simulate the printer spooler
	public static void print()
	{
		int printTime = 0;
		PrintTask newTask = null;
	
		// Process based on each second		
		for(int i = 0; i < simulationPd; i++)
		{
			// Check if printer is busy
			if(!hp.isBusy())
			{
				// Makes sure printer is allowed to take tasks
				if(i > minAT && i < maxAT)
				{
					newTask = printQueue.dequeue();
					if(!printQueue.isEmpty())
						printTime = hp.startNext(newTask);
					else
						return;
					hp.setIsBusy(true);
					newTask.setTimeEnqueued(i);
					numTasks++;
				}
			}
			else 
			{
				if(printTime != 0)
					printTime--;
				else
				{
					waitTime += (i-newTask.getTimeEnqueued());
					hp.setIsBusy(false);
				}
				
			}
		}
	}	
}
